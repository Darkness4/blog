{{define "index"}}
package index

import (
	"time"
	"encoding/xml"
	"github.com/gorilla/feeds"
)

type Index struct {
	Title         string    `xml:"-"`
	Description   string    `xml:"-"`
	PublishedDate time.Time `xml:"lastmod"`
	Href          string    `xml:"-"`
	EntryName     string    `xml:"-"`
	Loc           string    `xml:"loc"`
	Priority      float32   `xml:"priority,omitempty"`
	Tags          []string  `xml:"-"`
}

const PageSize = {{ .PageSize }}

var Pages = [][]Index{
	{{- range $page := .Pages}}
	{
		{{- range $i, $value := $page}}
		{
			EntryName: {{ $value.EntryName | quote }},
			Title: {{ $value.Title | quote }},
			Description: {{ $value.Description | quote }},
			PublishedDate: time.Unix({{ $value.PublishedDate }}, 0),
			Href: {{ $value.Href | quote }},
			Loc: {{ (print $.Href $value.Href) | quote }},
			Priority: 0.5,
			Tags: []string{
				{{- range $i, $tag := $value.Tags}}
				{{ $tag | quote }},
				{{- end}}
			},
		},
		{{- end}}
	},
	{{- end}}
}

func ToSiteMap(ii [][]Index) ([]byte, error) {
	var sitemap = struct {
		XMLName xml.Name `xml:"http://www.sitemaps.org/schemas/sitemap/0.9 urlset"`
		Urls    []Index  `xml:"url"`
	}{
		Urls: []Index{
			{
				Title:         {{ .Title | quote }},
				Description:   {{ .Description | quote }},
				PublishedDate: time.Now(),
				Loc:          {{ .Href | quote }},
				Priority:      0.8,
			},
		},
	}

	for _, i := range ii {
		sitemap.Urls = append(sitemap.Urls, i...)
	}

	return xml.MarshalIndent(sitemap, "", "  ")
}

var Feed = &feeds.Feed{
	Title: {{ .Title | quote }},
	Link:  &feeds.Link{
		Href: {{ .Href | quote }},
	},
	Description: {{ .Description | quote }},
	Author:   &feeds.Author{
		Name:	{{ .AuthorName | quote }},
		Email: {{ .AuthorEmail | quote }},
	},
	Created: time.Unix({{ .Created }}, 0),
	Updated: time.Unix({{ .Updated }}, 0),
	Items: []*feeds.Item{
		{{- range $page := .Pages}}
		{{- range $i, $value := $page}}
		{
			Title: {{ $value.Title | quote }},
			Description: {{ $value.Description | quote }},
			Created: time.Unix({{ $value.PublishedDate }}, 0),
			Link: &feeds.Link{
				Href: {{ (print $.Href $value.Href) | quote }},
			},
		},
		{{- end}}
		{{- end}}
	},
}
{{- end}}
