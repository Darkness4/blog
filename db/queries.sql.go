// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package db

import (
	"context"
)

const createOrIncrementPageViews = `-- name: CreateOrIncrementPageViews :one
INSERT INTO page_views (page_id, views)
VALUES ($1, 1)
ON CONFLICT (page_id)
DO UPDATE SET views = page_views.views + 1 RETURNING page_id, views
`

func (q *Queries) CreateOrIncrementPageViews(ctx context.Context, pageID string) (PageView, error) {
	row := q.db.QueryRow(ctx, createOrIncrementPageViews, pageID)
	var i PageView
	err := row.Scan(&i.PageID, &i.Views)
	return i, err
}

const createPageViewsIPs = `-- name: CreatePageViewsIPs :many
INSERT INTO page_views_ips (page_id, ip)
VALUES ($1, $2)
ON CONFLICT
DO NOTHING
RETURNING page_id, ip
`

type CreatePageViewsIPsParams struct {
	PageID string
	Ip     string
}

func (q *Queries) CreatePageViewsIPs(ctx context.Context, arg CreatePageViewsIPsParams) ([]PageViewsIp, error) {
	rows, err := q.db.Query(ctx, createPageViewsIPs, arg.PageID, arg.Ip)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PageViewsIp
	for rows.Next() {
		var i PageViewsIp
		if err := rows.Scan(&i.PageID, &i.Ip); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deletePageViews = `-- name: DeletePageViews :exec
DELETE FROM page_views
`

func (q *Queries) DeletePageViews(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deletePageViews)
	return err
}

const deletePageViewsIPs = `-- name: DeletePageViewsIPs :exec
DELETE FROM page_views_ips
`

func (q *Queries) DeletePageViewsIPs(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deletePageViewsIPs)
	return err
}

const findPageViews = `-- name: FindPageViews :one
SELECT page_id, views FROM page_views WHERE page_id = $1 LIMIT 1
`

func (q *Queries) FindPageViews(ctx context.Context, pageID string) (PageView, error) {
	row := q.db.QueryRow(ctx, findPageViews, pageID)
	var i PageView
	err := row.Scan(&i.PageID, &i.Views)
	return i, err
}

const findPageViewsByPageId = `-- name: FindPageViewsByPageId :many
SELECT page_id, views FROM page_views WHERE page_id = ANY($1::string[])
`

func (q *Queries) FindPageViewsByPageId(ctx context.Context, pageIds []string) ([]PageView, error) {
	rows, err := q.db.Query(ctx, findPageViewsByPageId, pageIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PageView
	for rows.Next() {
		var i PageView
		if err := rows.Scan(&i.PageID, &i.Views); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
